// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace chat_proto {
class Encryption;
struct EncryptionDefaultTypeInternal;
extern EncryptionDefaultTypeInternal _Encryption_default_instance_;
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class LoadResponse;
struct LoadResponseDefaultTypeInternal;
extern LoadResponseDefaultTypeInternal _LoadResponse_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace chat_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::chat_proto::Encryption* Arena::CreateMaybeMessage<::chat_proto::Encryption>(Arena*);
template<> ::chat_proto::Group* Arena::CreateMaybeMessage<::chat_proto::Group>(Arena*);
template<> ::chat_proto::GroupMember* Arena::CreateMaybeMessage<::chat_proto::GroupMember>(Arena*);
template<> ::chat_proto::LoadResponse* Arena::CreateMaybeMessage<::chat_proto::LoadResponse>(Arena*);
template<> ::chat_proto::User* Arena::CreateMaybeMessage<::chat_proto::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat_proto {

enum Encryption_EncryType : int {
  Encryption_EncryType_MRSA = 0,
  Encryption_EncryType_MAES = 1,
  Encryption_EncryType_Encryption_EncryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Encryption_EncryType_Encryption_EncryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Encryption_EncryType_IsValid(int value);
constexpr Encryption_EncryType Encryption_EncryType_EncryType_MIN = Encryption_EncryType_MRSA;
constexpr Encryption_EncryType Encryption_EncryType_EncryType_MAX = Encryption_EncryType_MAES;
constexpr int Encryption_EncryType_EncryType_ARRAYSIZE = Encryption_EncryType_EncryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encryption_EncryType_descriptor();
template<typename T>
inline const std::string& Encryption_EncryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encryption_EncryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encryption_EncryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encryption_EncryType_descriptor(), enum_t_value);
}
inline bool Encryption_EncryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encryption_EncryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encryption_EncryType>(
    Encryption_EncryType_descriptor(), name, value);
}
enum Error : int {
  NO_ERR = 0,
  REG_ERR_1 = 1,
  REG_ERR_2 = 2,
  LOGIN_ERR_1 = 3,
  LOGIN_ERR_2 = 4,
  LOGIN_ERR_3 = 5,
  CRE_GRP_ERR = 6,
  UNKNOWN_ERR = 7,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = NO_ERR;
constexpr Error Error_MAX = UNKNOWN_ERR;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
enum ChatType : int {
  TEXT = 0,
  PICRURE = 1,
  VIDEO = 2,
  FILE = 3,
  ChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatType_IsValid(int value);
constexpr ChatType ChatType_MIN = TEXT;
constexpr ChatType ChatType_MAX = FILE;
constexpr int ChatType_ARRAYSIZE = ChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatType_descriptor();
template<typename T>
inline const std::string& ChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatType_descriptor(), enum_t_value);
}
inline bool ChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatType>(
    ChatType_descriptor(), name, value);
}
enum MessageType : int {
  UNKNOWN_MSG = 0,
  LOAD_MAS = 1,
  LOAD_ACK = 2,
  LOGIN_MSG = 3,
  LOGIN_ACK = 4,
  REG_MSG = 5,
  REG_ACK = 6,
  ONE_CHAT_MSG = 7,
  ADD_FRIEND_MSG = 8,
  ADD_FRIEND_ACK = 9,
  CREATE_GROUP_MSG = 10,
  CREATE_GROUP_ACK = 11,
  ADD_GROUP_MSG = 12,
  ADD_GROUP_ACK = 13,
  GROUP_CHAT_MSG = 14,
  LOGINOUT_MSG = 15,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNKNOWN_MSG;
constexpr MessageType MessageType_MAX = LOGINOUT_MSG;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Encryption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_proto.Encryption) */ {
 public:
  inline Encryption() : Encryption(nullptr) {}
  ~Encryption() override;
  explicit PROTOBUF_CONSTEXPR Encryption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encryption(const Encryption& from);
  Encryption(Encryption&& from) noexcept
    : Encryption() {
    *this = ::std::move(from);
  }

  inline Encryption& operator=(const Encryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encryption& operator=(Encryption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encryption& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encryption* internal_default_instance() {
    return reinterpret_cast<const Encryption*>(
               &_Encryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Encryption& a, Encryption& b) {
    a.Swap(&b);
  }
  inline void Swap(Encryption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encryption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Encryption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Encryption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Encryption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Encryption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encryption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_proto.Encryption";
  }
  protected:
  explicit Encryption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Encryption_EncryType EncryType;
  static constexpr EncryType MRSA =
    Encryption_EncryType_MRSA;
  static constexpr EncryType MAES =
    Encryption_EncryType_MAES;
  static inline bool EncryType_IsValid(int value) {
    return Encryption_EncryType_IsValid(value);
  }
  static constexpr EncryType EncryType_MIN =
    Encryption_EncryType_EncryType_MIN;
  static constexpr EncryType EncryType_MAX =
    Encryption_EncryType_EncryType_MAX;
  static constexpr int EncryType_ARRAYSIZE =
    Encryption_EncryType_EncryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EncryType_descriptor() {
    return Encryption_EncryType_descriptor();
  }
  template<typename T>
  static inline const std::string& EncryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryType_Name.");
    return Encryption_EncryType_Name(enum_t_value);
  }
  static inline bool EncryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EncryType* value) {
    return Encryption_EncryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .chat_proto.Encryption.EncryType type = 1;
  void clear_type();
  ::chat_proto::Encryption_EncryType type() const;
  void set_type(::chat_proto::Encryption_EncryType value);
  private:
  ::chat_proto::Encryption_EncryType _internal_type() const;
  void _internal_set_type(::chat_proto::Encryption_EncryType value);
  public:

  // @@protoc_insertion_point(class_scope:chat_proto.Encryption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_proto.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_proto.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStatusFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes status = 3;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat_proto.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class GroupMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_proto.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() override;
  explicit PROTOBUF_CONSTEXPR GroupMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMember(const GroupMember& from);
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GroupMember& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_proto.GroupMember";
  }
  protected:
  explicit GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // optional bytes role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .chat_proto.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::chat_proto::User& user() const;
  PROTOBUF_NODISCARD ::chat_proto::User* release_user();
  ::chat_proto::User* mutable_user();
  void set_allocated_user(::chat_proto::User* user);
  private:
  const ::chat_proto::User& _internal_user() const;
  ::chat_proto::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::chat_proto::User* user);
  ::chat_proto::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:chat_proto.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::chat_proto::User* user_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_proto.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  explicit PROTOBUF_CONSTEXPR Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Group& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_proto.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 5,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
    kCreatorFieldNumber = 4,
  };
  // repeated .chat_proto.GroupMember members = 5;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::chat_proto::GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::GroupMember >*
      mutable_members();
  private:
  const ::chat_proto::GroupMember& _internal_members(int index) const;
  ::chat_proto::GroupMember* _internal_add_members();
  public:
  const ::chat_proto::GroupMember& members(int index) const;
  ::chat_proto::GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::GroupMember >&
      members() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 creator = 4;
  void clear_creator();
  uint32_t creator() const;
  void set_creator(uint32_t value);
  private:
  uint32_t _internal_creator() const;
  void _internal_set_creator(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chat_proto.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::GroupMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint32_t id_;
  uint32_t creator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class LoadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat_proto.LoadResponse) */ {
 public:
  inline LoadResponse() : LoadResponse(nullptr) {}
  ~LoadResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadResponse(const LoadResponse& from);
  LoadResponse(LoadResponse&& from) noexcept
    : LoadResponse() {
    *this = ::std::move(from);
  }

  inline LoadResponse& operator=(const LoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadResponse& operator=(LoadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadResponse* internal_default_instance() {
    return reinterpret_cast<const LoadResponse*>(
               &_LoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoadResponse& a, LoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat_proto.LoadResponse";
  }
  protected:
  explicit LoadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 1,
    kGroupListFieldNumber = 2,
  };
  // repeated .chat_proto.User friend_list = 1;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::chat_proto::User* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::User >*
      mutable_friend_list();
  private:
  const ::chat_proto::User& _internal_friend_list(int index) const;
  ::chat_proto::User* _internal_add_friend_list();
  public:
  const ::chat_proto::User& friend_list(int index) const;
  ::chat_proto::User* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::User >&
      friend_list() const;

  // repeated .chat_proto.Group group_list = 2;
  int group_list_size() const;
  private:
  int _internal_group_list_size() const;
  public:
  void clear_group_list();
  ::chat_proto::Group* mutable_group_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::Group >*
      mutable_group_list();
  private:
  const ::chat_proto::Group& _internal_group_list(int index) const;
  ::chat_proto::Group* _internal_add_group_list();
  public:
  const ::chat_proto::Group& group_list(int index) const;
  ::chat_proto::Group* add_group_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::Group >&
      group_list() const;

  // @@protoc_insertion_point(class_scope:chat_proto.LoadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::User > friend_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::Group > group_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Encryption

// .chat_proto.Encryption.EncryType type = 1;
inline void Encryption::clear_type() {
  type_ = 0;
}
inline ::chat_proto::Encryption_EncryType Encryption::_internal_type() const {
  return static_cast< ::chat_proto::Encryption_EncryType >(type_);
}
inline ::chat_proto::Encryption_EncryType Encryption::type() const {
  // @@protoc_insertion_point(field_get:chat_proto.Encryption.type)
  return _internal_type();
}
inline void Encryption::_internal_set_type(::chat_proto::Encryption_EncryType value) {
  
  type_ = value;
}
inline void Encryption::set_type(::chat_proto::Encryption_EncryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat_proto.Encryption.type)
}

// bytes code = 2;
inline void Encryption::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Encryption::code() const {
  // @@protoc_insertion_point(field_get:chat_proto.Encryption.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Encryption::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.Encryption.code)
}
inline std::string* Encryption::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:chat_proto.Encryption.code)
  return _s;
}
inline const std::string& Encryption::_internal_code() const {
  return code_.Get();
}
inline void Encryption::_internal_set_code(const std::string& value) {
  
  code_.Set(value, GetArenaForAllocation());
}
inline std::string* Encryption::_internal_mutable_code() {
  
  return code_.Mutable(GetArenaForAllocation());
}
inline std::string* Encryption::release_code() {
  // @@protoc_insertion_point(field_release:chat_proto.Encryption.code)
  return code_.Release();
}
inline void Encryption::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault()) {
    code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.Encryption.code)
}

// -------------------------------------------------------------------

// User

// uint32 id = 1;
inline void User::clear_id() {
  id_ = 0u;
}
inline uint32_t User::_internal_id() const {
  return id_;
}
inline uint32_t User::id() const {
  // @@protoc_insertion_point(field_get:chat_proto.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void User::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chat_proto.User.id)
}

// bytes name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:chat_proto.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chat_proto.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:chat_proto.User.name)
  return name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.User.name)
}

// bytes status = 3;
inline void User::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& User::status() const {
  // @@protoc_insertion_point(field_get:chat_proto.User.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.User.status)
}
inline std::string* User::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:chat_proto.User.status)
  return _s;
}
inline const std::string& User::_internal_status() const {
  return status_.Get();
}
inline void User::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_status() {
  // @@protoc_insertion_point(field_release:chat_proto.User.status)
  return status_.Release();
}
inline void User::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.User.status)
}

// -------------------------------------------------------------------

// GroupMember

// .chat_proto.User user = 1;
inline bool GroupMember::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GroupMember::has_user() const {
  return _internal_has_user();
}
inline void GroupMember::clear_user() {
  if (GetArenaForAllocation() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::chat_proto::User& GroupMember::_internal_user() const {
  const ::chat_proto::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::chat_proto::User&>(
      ::chat_proto::_User_default_instance_);
}
inline const ::chat_proto::User& GroupMember::user() const {
  // @@protoc_insertion_point(field_get:chat_proto.GroupMember.user)
  return _internal_user();
}
inline void GroupMember::unsafe_arena_set_allocated_user(
    ::chat_proto::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chat_proto.GroupMember.user)
}
inline ::chat_proto::User* GroupMember::release_user() {
  
  ::chat_proto::User* temp = user_;
  user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chat_proto::User* GroupMember::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:chat_proto.GroupMember.user)
  
  ::chat_proto::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::chat_proto::User* GroupMember::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat_proto::User>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::chat_proto::User* GroupMember::mutable_user() {
  ::chat_proto::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chat_proto.GroupMember.user)
  return _msg;
}
inline void GroupMember::set_allocated_user(::chat_proto::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:chat_proto.GroupMember.user)
}

// optional bytes role = 2;
inline bool GroupMember::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupMember::has_role() const {
  return _internal_has_role();
}
inline void GroupMember::clear_role() {
  role_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupMember::role() const {
  // @@protoc_insertion_point(field_get:chat_proto.GroupMember.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_role(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 role_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.GroupMember.role)
}
inline std::string* GroupMember::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:chat_proto.GroupMember.role)
  return _s;
}
inline const std::string& GroupMember::_internal_role() const {
  return role_.Get();
}
inline void GroupMember::_internal_set_role(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  role_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_role() {
  _has_bits_[0] |= 0x00000001u;
  return role_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_role() {
  // @@protoc_insertion_point(field_release:chat_proto.GroupMember.role)
  if (!_internal_has_role()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = role_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_.IsDefault()) {
    role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupMember::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_.IsDefault()) {
    role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.GroupMember.role)
}

// -------------------------------------------------------------------

// Group

// uint32 id = 1;
inline void Group::clear_id() {
  id_ = 0u;
}
inline uint32_t Group::_internal_id() const {
  return id_;
}
inline uint32_t Group::id() const {
  // @@protoc_insertion_point(field_get:chat_proto.Group.id)
  return _internal_id();
}
inline void Group::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Group::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chat_proto.Group.id)
}

// bytes name = 2;
inline void Group::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:chat_proto.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.Group.name)
}
inline std::string* Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chat_proto.Group.name)
  return _s;
}
inline const std::string& Group::_internal_name() const {
  return name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:chat_proto.Group.name)
  return name_.Release();
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.Group.name)
}

// bytes description = 3;
inline void Group::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:chat_proto.Group.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Group::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat_proto.Group.description)
}
inline std::string* Group::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:chat_proto.Group.description)
  return _s;
}
inline const std::string& Group::_internal_description() const {
  return description_.Get();
}
inline void Group::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:chat_proto.Group.description)
  return description_.Release();
}
inline void Group::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat_proto.Group.description)
}

// uint32 creator = 4;
inline void Group::clear_creator() {
  creator_ = 0u;
}
inline uint32_t Group::_internal_creator() const {
  return creator_;
}
inline uint32_t Group::creator() const {
  // @@protoc_insertion_point(field_get:chat_proto.Group.creator)
  return _internal_creator();
}
inline void Group::_internal_set_creator(uint32_t value) {
  
  creator_ = value;
}
inline void Group::set_creator(uint32_t value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:chat_proto.Group.creator)
}

// repeated .chat_proto.GroupMember members = 5;
inline int Group::_internal_members_size() const {
  return members_.size();
}
inline int Group::members_size() const {
  return _internal_members_size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline ::chat_proto::GroupMember* Group::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:chat_proto.Group.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::GroupMember >*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:chat_proto.Group.members)
  return &members_;
}
inline const ::chat_proto::GroupMember& Group::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::chat_proto::GroupMember& Group::members(int index) const {
  // @@protoc_insertion_point(field_get:chat_proto.Group.members)
  return _internal_members(index);
}
inline ::chat_proto::GroupMember* Group::_internal_add_members() {
  return members_.Add();
}
inline ::chat_proto::GroupMember* Group::add_members() {
  ::chat_proto::GroupMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:chat_proto.Group.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::GroupMember >&
Group::members() const {
  // @@protoc_insertion_point(field_list:chat_proto.Group.members)
  return members_;
}

// -------------------------------------------------------------------

// LoadResponse

// repeated .chat_proto.User friend_list = 1;
inline int LoadResponse::_internal_friend_list_size() const {
  return friend_list_.size();
}
inline int LoadResponse::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void LoadResponse::clear_friend_list() {
  friend_list_.Clear();
}
inline ::chat_proto::User* LoadResponse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat_proto.LoadResponse.friend_list)
  return friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::User >*
LoadResponse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:chat_proto.LoadResponse.friend_list)
  return &friend_list_;
}
inline const ::chat_proto::User& LoadResponse::_internal_friend_list(int index) const {
  return friend_list_.Get(index);
}
inline const ::chat_proto::User& LoadResponse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:chat_proto.LoadResponse.friend_list)
  return _internal_friend_list(index);
}
inline ::chat_proto::User* LoadResponse::_internal_add_friend_list() {
  return friend_list_.Add();
}
inline ::chat_proto::User* LoadResponse::add_friend_list() {
  ::chat_proto::User* _add = _internal_add_friend_list();
  // @@protoc_insertion_point(field_add:chat_proto.LoadResponse.friend_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::User >&
LoadResponse::friend_list() const {
  // @@protoc_insertion_point(field_list:chat_proto.LoadResponse.friend_list)
  return friend_list_;
}

// repeated .chat_proto.Group group_list = 2;
inline int LoadResponse::_internal_group_list_size() const {
  return group_list_.size();
}
inline int LoadResponse::group_list_size() const {
  return _internal_group_list_size();
}
inline void LoadResponse::clear_group_list() {
  group_list_.Clear();
}
inline ::chat_proto::Group* LoadResponse::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat_proto.LoadResponse.group_list)
  return group_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::Group >*
LoadResponse::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:chat_proto.LoadResponse.group_list)
  return &group_list_;
}
inline const ::chat_proto::Group& LoadResponse::_internal_group_list(int index) const {
  return group_list_.Get(index);
}
inline const ::chat_proto::Group& LoadResponse::group_list(int index) const {
  // @@protoc_insertion_point(field_get:chat_proto.LoadResponse.group_list)
  return _internal_group_list(index);
}
inline ::chat_proto::Group* LoadResponse::_internal_add_group_list() {
  return group_list_.Add();
}
inline ::chat_proto::Group* LoadResponse::add_group_list() {
  ::chat_proto::Group* _add = _internal_add_group_list();
  // @@protoc_insertion_point(field_add:chat_proto.LoadResponse.group_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chat_proto::Group >&
LoadResponse::group_list() const {
  // @@protoc_insertion_point(field_list:chat_proto.LoadResponse.group_list)
  return group_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat_proto::Encryption_EncryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_proto::Encryption_EncryType>() {
  return ::chat_proto::Encryption_EncryType_descriptor();
}
template <> struct is_proto_enum< ::chat_proto::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_proto::Error>() {
  return ::chat_proto::Error_descriptor();
}
template <> struct is_proto_enum< ::chat_proto::ChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_proto::ChatType>() {
  return ::chat_proto::ChatType_descriptor();
}
template <> struct is_proto_enum< ::chat_proto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_proto::MessageType>() {
  return ::chat_proto::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
